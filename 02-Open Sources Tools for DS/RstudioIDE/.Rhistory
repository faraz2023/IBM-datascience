# load packages
library(caret)
# load the dataset
data(iris)
# summarize data
summary(iris[,1:4])
# calculate the pre-process parameters from the dataset
preprocessParams <- preProcess(iris[,1:4], method=c("scale"))
# summarize transform parameters
print(preprocessParams)
# transform the dataset using the parameters
transformed <- predict(preprocessParams, iris[,1:4])
# summarize the transformed dataset
summary(transformed)
# load packages
install_flag <- FALSE
if (install_flag){
install.packages("caret")
}
library(caret)
# load the dataset
data(iris)
# summarize data
summary(iris[,1:4])
# calculate the pre-process parameters from the dataset
preprocessParams <- preProcess(iris[,1:4], method=c("scale"))
# summarize transform parameters
print(preprocessParams)
# transform the dataset using the parameters
transformed <- predict(preprocessParams, iris[,1:4])
# summarize the transformed dataset
summary(transformed)
# Load packages
library(randomForest)
library(mlbench)
library(caret)
# Load Dataset
data(Sonar)
dataset <- Sonar
x <- dataset[,1:60]
y <- dataset[,61]
View(Sonar)
View(Sonar)
knitr::opts_chunk$set(echo = TRUE)
install_flag <- TRUE
if (install_flag) {
install.packages("caret", repos = "http://cran.us.r-project.org")
install.packages("fastICA", repos = "http://cran.us.r-project.org")
install.packages("e1071", repos = "http://cran.us.r-project.org")
install.packages("lattice", repos = "http://cran.us.r-project.org")
install.packages("ggplot2", repos = "http://cran.us.r-project.org")
install.packages("klaR", repos = "http://cran.us.r-project.org")
install.packages("randomForest", repos = "http://cran.us.r-project.org" )
}
library(caret)
library(mlbench)
library(klaR)
library(randomForest)
# Load Dataset
data(Sonar)
dataset <- Sonar
x <- dataset[,1:60]
y <- dataset[,61]
# Create model with default paramters
trainControl <- trainControl(method="repeatedcv", number=10, repeats=3)
seed <- 7
metric <- "Accuracy"
set.seed(seed)
mtry <- sqrt(ncol(x))
tunegrid <- expand.grid(.mtry=mtry)
rfDefault <- train(Class~., data=dataset, method="rf", metric=metric, tuneGrid=tunegrid,
trControl=trainControl)
print(rfDefault)
# Random Search
trainControl <- trainControl(method="repeatedcv", number=10, repeats=3, search="random")
set.seed(seed)
mtry <- sqrt(ncol(x))
rfRandom <- train(Class~., data=dataset, method="rf", metric=metric, tuneLength=15,
trControl=trainControl)
print(rfRandom)
plot(rfRandom)
# Grid Search
trainControl <- trainControl(method="repeatedcv", number=10, repeats=3, search="grid")
set.seed(seed)
tunegrid <- expand.grid(.mtry=c(1:15))
rfGrid <- train(Class~., data=dataset, method="rf", metric=metric, tuneGrid=tunegrid,
trControl=trainControl)
print(rfGrid)
plot(rfGrid)
# Algorithm Tune (tuneRF)
set.seed(seed)
bestmtry <- tuneRF(x, y, stepFactor=1.5, improve=1e-5, ntree=500)
print(bestmtry)
# Manual Search
trainControl <- trainControl(method="repeatedcv", number=10, repeats=3, search="grid")
tunegrid <- expand.grid(.mtry=c(sqrt(ncol(x))))
modellist <- list()
for (ntree in c(1000, 1500, 2000, 2500)) {
set.seed(seed)
fit <- train(Class~., data=dataset, method="rf", metric=metric, tuneGrid=tunegrid,
trControl=trainControl, ntree=ntree)
key <- toString(ntree)
modellist[[key]] <- fit
} #
compare results
library(caret)
summary(caret)
install.packages("caret")
install.packages("caret")
install.packages("randomForest")
install.packages("e1071")
sc
setwd("C:/Users/faraz/OneDrive - University of Toronto/IBM-datascience/02-Open Sources Tools for DS/RstudioIDE")
pd = read.csv("student_grades.csv")
x = 1
View(dataset)
View(dataset)
x
x = 3
pd = read.csv("student_grades.csv")
View(pd)
View(pd)
setwd("C:/Users/faraz/OneDrive - University of Toronto/IBM-datascience/02-Open Sources Tools for DS/RstudioIDE")
#Import the leaflet library for plotting maps in R
library(leaflet)
#If the above line of code returns an error as in:
#  "Error in library(leaflet):there is no package called 'leaflet'"
#Then run the follow command to install the package:
install.packages("leaflet")
#Important! After installing, go back to the top and run `library(leaflet)` to load the library
#New York GPS
nyc_latitude = 40.7128
nyc_longitude = -74.0060
#Create a map
m <- leaflet() %>% setView(lng = nyc_longitude,
lat = nyc_latitude,
zoom = 12)
m %>% addTiles()
library(leaflet)
install.packages("leaflet")
install.packages("leaflet")
nyc_latitude = 40.7128
nyc_longitude = -74.0060
m <- leaflet() %>% setView(lng = nyc_longitude,
lat = nyc_latitude,
zoom = 12)
m %>% addTiles()
#Import the leaflet library for plotting maps in R
library(leaflet)
#If the above line of code returns an error as in:
#  "Error in library(leaflet):there is no package called 'leaflet'"
#Then run the follow command to install the package:
install.packages("leaflet")
#Important! After installing, go back to the top and run `library(leaflet)` to load the library
#New York GPS
nyc_latitude = 40.7128
nyc_longitude = -74.0060
#Create a map
m <- leaflet() %>% setView(lng = nyc_longitude,
lat = nyc_latitude,
zoom = 12)
m %>% addTiles()
install.packages("leaflet")
install.packages("leaflet")
install.packages("leaflet")
install.packages("leaflet")
install.packages("leaflet")
install.packages("leaflet")
install.packages("leaflet")
install.packages("leaflet")
#Import the leaflet library for plotting maps in R
library(leaflet)
#If the above line of code returns an error as in:
#  "Error in library(leaflet):there is no package called 'leaflet'"
#Then run the follow command to install the package:
install.packages("leaflet")
#Important! After installing, go back to the top and run `library(leaflet)` to load the library
#New York GPS
nyc_latitude = 43.6532
nyc_longitude = -79.3832
#Create a map
m <- leaflet() %>% setView(lng = nyc_longitude,
lat = nyc_latitude,
zoom = 12)
m %>% addTiles()
install.packages("leaflet")
#  "Error in library(leaflet):there is no package called 'leaflet'"
#Then run the follow command to install the package:
install.packages("leaflet")
#Important! After installing, go back to the top and run `library(leaflet)` to load the library
#New York GPS
nyc_latitude = 40.7128
nyc_longitude = -74.0060
#Create a map
m <- leaflet() %>% setView(lng = nyc_longitude,
lat = nyc_latitude,
zoom = 12)
m %>% addTiles()
install.packages("leaflet")
